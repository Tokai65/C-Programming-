
＊配列の各要素に先頭から順に0,1,2,3,4を代入して表示

#include <stdio.h>

int main(void)
{
    int i;
    int v[5];    /* int[5]型の配列 */
    
    for (i=0; i<5; i++)
        v[i]=i;
        
    for (i=0; i<5; i++)
        printf("v[%d]= %d\n, i, v[i]");
                /添字/
    return 0;
}
    
****************************************************************************************************************

＊配列の宣言　(配列を使うための準備)
宣言の際は、要素型と変数名と要素数を与えます。[]の中に与える要素数は定数でなければならない。
要素の型はint doubleなどなんでも構わない。


添字演算子(subscript operator)



--------------------------------------------------------------------------------------------------------------


＊配列の各要素に先頭から順に5,4,3,2,1を代入して表示

#include<stdio.h>

int main(void)
{
    int i;
    int v[5];
    
    for (i=0; i<5; i++)
        v[i]=5-i;
        
    for (i=0; i<5; i++)
        printf("v[%d]=%d\n,i,v[i]");
    
    return 0;
}



****************************************************************************************************************


配列要素のアクセスと走査(traverse)

＊添字演算子　a[b]  配列aの先頭からb個後ろの要素をアクセスする。





--------------------------------------------------------------------------------------------------------------



＊配列の各要素に先頭から順に5,4,3,2,1で初期化して表示

#include<stdio.h>

int main(void)
{
    int i;
    int v[5] = {5,4,3,2,1};
   
    for (i=0; i<5; i++)
        printf("v[%d]=%d\n,i,v[i]");
    
    return 0;
}




****************************************************************************************************************


{}内に初期化子が与えられていない要素は0で初期化されるという規則があります。





--------------------------------------------------------------------------------------------------------------



＊配列の全要素を別の配列に逆順にコピー


#include<stdio.h>

int main(void)
{
    int i;
    int a[5] = {17,23,36};
    int b[5];
   
    for (i=0; i<5; i++)
        b[i]=a[4-i];
    
    puts(" a  b");
    puts("------");
    for(i=0; i<5; i++)
        printf("%4d%4d\n",a[i],b[i]);
    
    return 0;
}


****************************************************************************************************************







--------------------------------------------------------------------------------------------------------------










--------------------------------------------------------------------------------------------------------------
