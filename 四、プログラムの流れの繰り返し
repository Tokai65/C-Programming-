1、do　statement

while「〜のあいだ」

loop本体



2、論理否定演算子(logical negation operator)

!retry   /* retry == 0と同じ　*/

＊論理否定演算子  !a  //  aが0であれば1、そうでなければ0(その型はint型)



3、読み込む値の絞り込み

多重ループ



4、ド・モルガンの法則(De Morgan's theorem)

「各条件の否定をとって、論理積・論理和を入れかえた式」の否定が、元の条件と同じになることは、ド・モルガンの法則と呼ぶ。

・ x && y !(!x || !y)は等しい。
・ x || y !(!x && !y)は等しい。

例コード：

do{
   print("もう一度？【Yes...0/No...9】:")
   scanf("%d", &retry);
  } while(!(retry == 0 || retry == 9));
  
＊論理否定演算子！を使って書き換えた式!(retry == 0 || retry == 9)は、繰り返しを終了するための終了条件の否定です。



5、do文による加算
まずaとbの小さい方の値をlowerとupperに求める。

変数sumへの代入
変数noへの代入


do {
    sum += no;
    no++;
}  while (no <= upper);  / upperまでの合計を求める /



6、複合代入演算子(compound assignment operator)  //  +=

ほぼ同じ：　sum = sum + no  //  sum += no（メリット：簡潔）



7、後置増分演算子(postfixed increment operator)　と　後置こうち減分演算子(postfixed decrement operator)

ほぼ同じ：　no = no + 1 // no++

＊最後に画面に表示されるnoの値は0ですが、whie文の終了時には、その値は-1となっていることに注意する。
＊do文のループ本体は少なくとも一回は実行されるのに対し、 while文のループ本体は１回も実行されない可能性があります。この点はdo文とwhile文の決定的な違いです。

do文　...　後判定繰返し：ループ本体を実行した後に判定を行う。
while文　...　前判定繰返し：ループ本体を実行した前に判定を行う。



8、前置増分演算子と前置減分演算子

++a 　aの値を一つだけ増やす（式全体を評価すると、増分後の値となる）。
--a


9、Key word

  auto     / break  / case    / char   / const    / continue 
  default  / do     / double  / else   / enum     / extern 
  float    / for    / goto    / if     / int      / long 
  register / return / short   / signed / sizeof   / static
  struct   / switch / typedef / union  / unsigned / void
  volatile / while


10、do文の表記

// do文のループ本体は複合文 // 

x = 0
do {
    x++;
} while (x < 5);
while (x >= 0)
  printf("%d", --x);
  
＊ちゃんとループ本体を{}で囲んでブロックする。

注：
} while ... 行の先頭に}がある　 do 文の1部
while   ... 行の先頭に}がない　 while 文の1部



11、2のべき乗の列挙

複合代入演算子*=を利用する。



12、繰り返しの回数

while文の制御式がi < noに変更されています。繰り返しの回数が no-1 回となる。

実現コード：

int i = 1;
printf("{");
while (i <= no) {
    printf("%d",i);
    if(i == no)
       printf("}\n");
    else
       printf(",");
    i++;
}

______________________________________________________________________________________________


13、制御式における後置減分演算子の活用

文字定数(character constant):'*','\n'のように
文字列リテラル：＊　ーー　文字＊だけから構成される文字の並びを表す。



#include <stdio.h>

int main(void)
{
    int no;

    printf("正の整数");
    scanf("%d", &no);

    if (no>=1) {
        while (no-->0)
            putchar('*');
        putchar('\n');
    }
    return 0;
}


______________________________________________________________________________________________


14、一定回数の繰り返し


欠点があるコード：

#include <stdio.h>

int main(void)
{
    int i, no;
    
    printf("正の整数");
    scanf("%d", &no);
    
    if(no >= 1) {
       int i = 1;
       while (i <= no) {
           if (i % 2)
               putchar('+');
           else
               putchar('-');
           i++;
       }
       putchar('\n');
    }
    return 0;
 }
               

****************************************************************************************************************************

修正したコード：


#include <stdio.h>

int main(void)
{
    int i, no;
    
    printf("正の整数");
    scanf("%d", &no);
    
    if(no >= 1) {
       int i = 1;
       while (i <= no / 2) {
           printf ("+-");
           i++;
       }
       if(no % 2 == 1) 
               putchar('+');
          putchar('+');
       putchar('\n');
    }
    return 0;
 }




______________________________________________________________________________________________


識別子(identifier)


#include <stdio.h>

int main(void)
{
    int i, no;
    
    printf("正の整数");
    scanf("%d", &no);
    
    while (no-- > 0)
        puts("*");
        
    return 0;
}



______________________________________________________________________________________________


15、逆順に表示する


#include <stdio.h>

int main(void)
{
    int no;
    
    do {
       printf({"正の整数を入力してください:");
       scanf("%d",&no);
       if (no <= 0);
       puts("\a"正でない数を入力しないでください。");
    } while (no <= 0);
    printf("d%を逆から読むと",no);
    while (no > 0) {
       printf("%d",no % 10);
       no /= 10;
    }
    puts("です。");
    
    return 0;
}



＊　最初のdo文は、読み込む値を正値に制限するための繰り返し文です。




______________________________________________________________________________________________


＊数値の桁数を求める


読み込んだ正の整数値の桁数を表示


#include <stdio.h>

int main(void)
{
    int no, temp;
    int digits;          // 桁数 // 
    
    do {
       printf({"正の整数を入力してください:");
       scanf("%d",&no);
       if (no <= 0);
       puts("\a"正でない数を入力しないでください。");
    } while (no <= 0);
    
    temp = no;
    digits = 0;
    
    while (temp > 0){
        temp /=10;
        digits++;
    }
    printf("%d%はd桁です。\n",no,digits);
    return 0;
}


＊temp / 10 の演算は、変数tempの最下位桁を弾きだして、それ以外の桁を右に１桁ずらします。
digitsは、除算を行った回数であり、その値はnoの桁数と一致します。



******************************************************************************************************


＊temp不要：


...
printf("%dは",no);
while (no > 0) {
    no /= 10;
    digits++;
}    
printf("%d桁です。"digits);



______________________________________________________________________________________________


１からnまでの和を求める


#include <stdio.h>

int main(void)
{
    int i;
    int sum = 0;
    int n;
    
    printf("nの値":");
    scanf("%d",&n);
    
    for(i=1; i<=n; i++)
       sum += i;
       
    printf("1から%までの和は%dです。\n",n,sum);
    
    return 0;
}
      


＊for文構造：

for--(-式-;-式-;-式-)--



______________________________________________________________________________________________



繰り返しと計算効率：

読み込んだ整数の個数だけ1234567890を繰り返し表示

#include <stdio.h>

int main(void)
{
    int i,no,r,q;
       printf({"正の整数を入力してください:");
       scanf("%d",&no);
       
       q= no/10;
       r= no%10;
       for (i=1;i<=q; i++)
       printf(i=1;i<=r;1++)
       printf("%d",i%10);
    putchar('\n');
    
    return 0;
}




______________________________________________________________________________________________


身長と標準体重の対応表を表示


#include <stdio.h>

int main(void)
{
    int height;
    int lower,upper,step;
    
    printf("何cmから:"); scanf("%d",&lower);
    printf("何cmまで:"); scanf("%d",&upper);
    printf("何cmごと:"); scanf("%d",&step);

    for (height = lower;height <= upper; height += step)
        printf("%dcm %.2kg\n",height,(height - 100)* 0.9);
    
    return 0;
}


**************************************************************************************************


for文とwhile文を用いて実現すると

height = lower;
while(height <= upper) {
    printf("%dcm  %.2fkg\n",height,(height-100)* 0.9);
    height += step;
}

**************************************************************************************************


for ( A ; B ; C )
     文

************************************　ほぼ同じ　******************************************************

A;
while (B) {
   文
   C;
}

**************************************************************************************************


＊区切りし(punctuator)

[],{},() * , ; = ; ... #



______________________________________________________________________________________________


奇数の列挙
＊for文のC部 i += 2では、右オペランド値を左オペランドに加える複合代入演算子を使っています。


読み込んだ整数値以下の奇数を表示


#include <stdio.h>

int main(void)
{
    int i,no;
    
    printf("整数値：");
    scanf("%d",i);
    
    for(i=1; i<=no; i+=2)
       printf("%d",i);
    putchar('\n');
    
    return 0;
}

______________________________________________________________________________________________


読み込んだ整数値以下の整数とその２乗値を表示


#include <stdio.h>

int main(void)
{
    int i,n;
    
    printf("nの値：");
    scanf("%d",&n);
    
    for (i=1 ;i<=n; i++)
        printf("%dの2乗は%d\n",i,i*i);
        
    return 0;
}




**************************************************************************************************


＊繰返し文　(iteration statement)  do / while / for文
＊定数と文字列リテラル　　文字定数、整数定数、浮動小数点定数、文字列リテラルは、プログラムを構成する要素の一つです。

＊インデント（段付け/字下げ）　　　
＊インデンテーション


______________________________________________________________________________________________


読み込んだ整数の個数だけ5個ごとに改行しながら'*'を表示


#include <stdio.h>

int main(void)
{
    int i,no;
    
    printf("何個*を表示しますか：");
    scanf("%d", &no);
    
    if (no > 0) {
        int i;
        for (i = 0; i<no; i++) {
            putchar('*');
            if (i%5 == 4)
                putchar('\n');
        }
        if (i%5!=0)
            putchar('\n');
    ]
    return 0;
}


**************************************************************************************************


修正したコード(効率化)：

if (no>0){
    int i;
    int rem = no%5;
    for(i=o; i<no / 5; i++)
    puts("*****");
    if(rem > 0) {
       for (i=0; i<rem; i++)
            putchar('*');
       putchar('\n');
    }
    return 0;
}      
 

______________________________________________________________________________________________


＊読み込んだ整数値の全約数とその個数を表示


#include <stdio.h>

int main(void)
{
    int i, n, count;
    printf("整数値:");
    scanf("%d",&n);
    
    count = 0;
    for(i=1; i <= n; i++)
        if (n % i == 0) {
            printf("%d\n",i);
            count++;
        }
    printf("約数は%d個です。\n",count);
    return 0;
}



______________________________________________________________________________________________


＊読み込んだ面積をもつ長方形の辺と長さを列挙


#include <stdio.h>

int main(void)
{
    int area;
    int tate;
    
    printf("面積:")；
    scanf("%d",&area);
    
    for(tate = 1; tate < area; tate++) {
        if(tate * tate > area) break;
        if(area % tate !=0) continue;
        printf("%d x %d\n",tate,area / tate);
    }
    return 0;
}

______________________________________________________________________________________________


＊break文とcontinue文

/ 九九の表を表示 /


#include <stdio.h>

int main(void)
{
    int i,j;
    printf(" |");
    for (i=1; i<=9; i++)
    printf("%3d",i);
    putchar('\n');

    puts("--+-------------------------");

    for(i = 1; i <= 9; i++) {
        printf("%d |",i);
        for (j=1; j<=9; j++)
            printf("%3d", i*j);
        putchar('\n');
    }
    return 0;
}



______________________________________________________________________________________________


＊正方形を描画


#include <stdio.h>

int main(void)
{
    int i,j;
    int height;
    
    puts("正方形を作ります。");
    printf("何段ですか：")； scanf("%d",height);
    
    for(i=1; i<=height; i++) {
        for(j=1; j<=height; j++)
            putchar('*');
        putchar('\n');
    }
    return 0;
}



______________________________________________________________________________________________


＊長方形を描画

#include <stdio.h>

int main(void)
{
    int i,j;
    int side1, side2, height, width;
    
    puts("横長の長方形を作ります。");
    printf("一辺（その1）：");  scanf("%d",%side1);
    printf("一辺（その2）：");  scanf("%d",%side2);
    
    if(side1 < side2) {
       height = side1;
       width  = side2;
    } else {
       height = side2;
       width  = side1;
    }
    for (i=1; i<=height; i++) { 
         for(j=1; j <=width; j++)
             putchar('*');
         putchar('\n')
    }
    return 0;
}


______________________________________________________________________________________________



＊width個ごとに改行しながらno個の'*'を表示



#include <stdio.h>

int main(void)
{
    int i,j;
    int no, width;
    
    printf("何個*を表示しますか：");   scanf("%d", &no);
    printf("何個ごとに改行しますか：")　scanf("%d", &width);
    
    if (no>0) {
        int i, j;
        int rem = no % width;
        for (i=0; i<no/width; i++)
             putchar('*');
        putchar('\n');
    }
        if (rem>0) {
             for (i=0; i<rem; i++)
                 putchar('*');
             putchar('\n');
        }
    }
    
    return 0;
}



______________________________________________________________________________________________


＊width個ごとに改行しながら'+'と'-'を表示



#include <stdio.h>

int main(void)
{
    int no, width;

    printf("何個*を表示しますか：");   scanf("%d", &no);
    printf("何個ごとに改行しますか："); scanf("%d", &width);

    if (no>0) {
        int i, j;
        int rem = no % width;
        int wid = width / 2;
        int odd = width % 2;
        for (j = 0; j < width / 2; i++) {
            for (j = 0; j < wid; j++) printf("+-");
            if (odd) putchar('+');
            putchar('\n');
            for (j = 0; j < wid; j++) printf("-+");
            if (odd) putchar('-');
            putchar('\n');
        }
        if (no / width % 2) {
            for (j = 0; j < wid; j++) printf("+-");
            if (odd) putchar('+');
            putchar('\n');
        }
        if (rem > 0) {
            switch (no / width % 2) {
                case 0:for (j = 0; j < rem / 2; j++) printf("+-");
                       if (rem % 2) putchar('+');
                       break;
                case 1:for (j = 0; j < rem / 2; j++) printf("-+");
                       if (rem % 2) putchar('-');
                       break;
            }
            putchar('\n');
        }
    }

    return 0;
}





______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________










______________________________________________________________________________________________












