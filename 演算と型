一、商と剰余

1、整数/整数:商の整数部
整数%整数:剰余

演算子：operator  // 　和、積などを求める記号
オペランド: operand // その演算の対象となる変数や定数
乗除演算子：multiplicative operator / 加減　additive operator 


2、printf関数による％文字の表示

%% = 文字%

全角文字と半角文字

scanf("%d%d",&a,&b) 　　実引数と一対一で対応するので、　変換指定は構わん

3、aveと符号を反転する

4、
単項算術演算子(unary operator)     //  単項＋演算子　+a aの値
二項演算子(binary operator)
三項演算子(tenary operator)


単純代入演算子(simple assignment operator)　　　　//  a=b 　bをaに代入。

5、式(expression)と代入式 
// vx + 32  加算を行う式
// vc = vx + 32  代入式(assignment expression)
// vc = vx + 32; 式文(expresion statement)　 　";"セミコロンが付くこと



6、型

integer constant(定数) / floating constant 

浮動小数点数floating-point number

オブジェクト：それぞれの型には固有の性質があり、その性質をそっくり受け継いて作られた変数のことを、オブジェクトと呼ぶ。

double型の変数に値を読み込むときにscanf関数に与える変換指定は%lfです。また、printf関数でdouble型の値を表示するための変換指定は%fです。
変換指定は%f：floating-pointの頭文字。小数点以下の部分が6桁表示される。



変換指定の使い分け
　　　　　　　　　　　　　　　　　10進数のint型　　　　　double型
prinf関数による表示            printf("%d",no);    printf("%f",no);
scanf関数による表示            scanf("%d",%no);    scanf("%lf",$no);


演算の対象となるオペランドの型が異なるとき、小さい方の型のオペランドは、より大きくて懐の広い方の型に変換された上で演算が行われる。


例：printf("aの値はbの%f%%です。\n", (double)a / b * 100.0);



7、キャスト式

キャスト演算子(cast operator): （型名）a  aの値を型名で指定された型の値に変換したものを生成。


8、変更指定

%if「浮動小数点数を小数点以下を1桁で表示せよ」

%09.9f  // 0フラグ・最小フィルード幅・精度・変換指定子 //


9、if　もしも　ならば

制御式(control expression)


10、if else

例：　約数の判定


11、等価演算子(equality operator)

==演算子  a == b  (int型)
!=演算子  a != b aとbの値が等しなければ1、そうでなければ0　(int型)



12、関係演算子(relational operator)  // (int型 👌)

13、絶対値

if (num < 0)
   printf("絶対値は%dです。",-num);
else
   print("絶対値は%dです。",num);


14、評価 evaluation // 式の値を調べること、調べる次第で採用する。


15、条件演算子(conditional operator) // 3つのオペランドを必要とする３項演算子です。
a ? b : c  aが非0であれば、bを評価した値、そうでなければcを評価した値。


16、論理演算子

論理AND演算子　a && b aとbの値のいずれも非0であれば1、そうでなければ0。(int型)
論理or演算子　 a || b aとbの値の一方でも非0であれば1、そうでなければ0。(int型)


17、短路評価(short circuit evaluation)

//左オペランドの評価の結果のみで明確になる場合に、右オペランドの評価が行われないことです。










